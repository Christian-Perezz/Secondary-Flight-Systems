/* FlightComputerBAT.ino
 * Revision date: 14 Dec 2021
 * Edition: 1.2
 * Written by: Texas State Aerospace Team (BAT), Christian Perez
 * This code is written for the flight computer built and designed by the Avionics Club of the Texas State University
 * Aerospace Team. The purpose of this program is to control a flight computer that will sussesfully launch a high 
 * powered rocket 10,000 ft into the air. Once appagee is reached at 10,000 ft, parachutes will be deployed to allow 
 * for a safe landing of the rocket back onto the ground. If any avionics/BAT members make changes to the code, please
 * update the edition and leave a note below explaining changes. 
 * 
 * NOTE: 12/14/21- Started beginning stages for the code. As of now, the computer is set up to interface with the BMP388 and MPU-6050 
 *                 on a small easily testible scale. Acceleration values given by the MPU-6050 appear to be inconsistent when MPU is 
 *                 stationary. Only HV 1 is set up currently for ease of breadboard use. - Connor Martin [1.00] 
 *
 * Version 1.2 --  Addition of SPI flash SD card and data file functionality - Christian Perez
 *
 *
 */
/*******************DEFINITION, HANDLERS AND LIBRARIES BELOW*********************/

//Communication protocols
#include <Wire.h> //I2C
#include <SPI.h> //SPI

//The following definitions and inclusions are required for the BMP388 
#include "Adafruit_Sensor.h" //adafruit library
#include <Adafruit_BMP3XX.h>
#include <bmp3.h>
#include <bmp3_defs.h> //headers and libraries for BMP388
// end of BMP include 

//SPI dependencies
//#include <Adafruit_FlashCache.h>
#include <Adafruit_FlashTransport.h>
#include <Adafruit_SPIFlash.h>
#include <Adafruit_SPIFlashBase.h>
#include <flash_devices.h> // SPI flash mem libraries
//end

//libraries
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <SD.h>
#include <SdFat.h>
//end

//The following definitions and inclusions are required for the BMP388
#define SEALEVELPRESSURE_HPA (1013.25)

//handler for bmp
Adafruit_BMP3XX bmp;



//The following definitions and inclusions are required for the MPU-6050  
#include <Adafruit_MPU6050.h>  

//handler for mpu
Adafruit_MPU6050 mpu;

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//definitions
#define FILE "dump.txt"

//Global variables
File data;
Sd2Card card;
SdVolume volume;

const int buz = 0,
          red = 1,
          blue = 2,
          cs1 = 5, //chip select 1
          hv1 = 6, //hv lines
          hv2 = 7, //
          hv3 = 8, // 
          hv4 = 9, //  
          cs0 = 10; //chip select 0 -- SD card cs

int ctrl = 1,
    exe = 0;

String cmd; //command string from serial prompt
       
//****************************SETUP FUNCTION FOR SENSORS****************************
void setup() // initial setup -- referenced in main loop down below
{
    while(!Serial)
    {
      delay(500); //while serial comminucations is intializing
      break;
    }
    
    if(Serial);
    {
      Serial.begin(115200);
      Serial.print("Initilizing setup... ");
      Serial.println("Booting BAT Aerospace flight systems...");
    }

      

//****************************PIN DELCARATIONS****************************
//The following lines of code are for intialzing the output pins on the Teesny 4.0 
// HV - High Voltage. 
    pinMode(buz, OUTPUT); //BUZZER PIN 0
    pinMode(blue, OUTPUT); //BLUELED PIN 1
    pinMode(red, OUTPUT); //REDLED PIN 2    ////////////// IMPORTANT NOTE: No need to define pins used  ////////////////
    pinMode(cs1, OUTPUT); //CS 1 PIN 5      ////////////// for SPI or i2C (Exception: CS [Chip Select] needs defining) ////////////////
    pinMode(hv1, OUTPUT); //HV 1 PIN 6
    pinMode(hv2, OUTPUT); //HV 2 PIN 7
    pinMode(hv3, OUTPUT); //HV 3 PIN 8
    pinMode(hv4, OUTPUT); //HV 4 PIN 9
    pinMode(cs0, OUTPUT); //CS 0 PIN 10
//END PIN DECLARATIONS
    
    if (!bmp.begin_I2C()) // hardware I2C mode, can pass in address & alt Wire
    {   
      //if (! bmp.begin_SPI(BMP_CS)) {  // hardware SPI mode  
      //if (! bmp.begin_SPI(BMP_CS, BMP_SCK, BMP_MISO, BMP_MOSI)) {  // software SPI mode
      Serial.println("Failed to find BMP388 chip...");
      alert();
      serial_monitor();
    }
    
    if (!mpu.begin()) //when mpu did not auto initialize
    {
      Serial.println("Failed to find MPU6050 chip...");
      digitalWrite(red, 1);
      alert();
      serial_monitor();
    }
    
    digitalWrite(cs0, HIGH); //select SD card
    
    if(!SD.begin(cs0)) //10 is chip select pin for SD card
    {
      Serial.println("SD card failed to initilize...");
      alert();
      serial_monitor();
    }

    Serial.println("...Success!");

    get_SD();
       
    //initalizing data file
    Serial.println("Inilitizing data file...");
    
    if(!SD.exists("dump.txt")); //if function returns false
    {
      Serial.println("ERRROR - file does not exist or is missing from directory");
      alert();
      return;
    }
    
    data = SD.open("dump.txt"); //handle for file
    
    if(data) //if file opens successfuly
    {
      Serial.print("Analog sensor data dump...");
      data.close();
      Serial.println("confirmed");
    }
    
    else
    {
      Serial.println("Error -- file did not open. Check folder contents.");
      alert();
      return;
    }

    data.close();
  
//****************************END OF SENSOR INITIALIZERS****************************

//****************************BMP SENSOR CONFIG****************************

//Set up oversampling and filter initialization for the BMP [ Data Acquisition ]
bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
bmp.setOutputDataRate(BMP3_ODR_50_HZ);
//refer to adafruit documentation

//END OF BMP CONIFG

//****************************MPU SENSOR CONFIG****************************

  //8-G mode definitions 
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G); //set G-forcve range to 8

  // MPU G-force detection cases. Here data from the MPU is revieced and a G-force range is determined
  Serial.print("Accelerometer range set to: ");

  //case statement for all possible gyro ranges  
  switch (mpu.getAccelerometerRange()) 
  {
    case MPU6050_RANGE_2_G: //detected 2Gs
        Serial.println("+-2G");
        break;
    case MPU6050_RANGE_4_G: //detected 4Gs
        Serial.println("+-4G");
        break;
    case MPU6050_RANGE_8_G: //detected 8Gs
        Serial.println("+-8G");
        break;
    case MPU6050_RANGE_16_G: //deteced 16Gs
        Serial.println("+-16G");
        break;
  }

  //degree range set for MPU 
  
  mpu.setGyroRange(MPU6050_RANGE_500_DEG); //set degree range to 500

  //case statement for all possible gyro ranges
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) 
  {
    case MPU6050_RANGE_250_DEG:
      Serial.println("+- 250 deg/s");
      break;
    case MPU6050_RANGE_500_DEG:
      Serial.println("+- 500 deg/s");
      break;
    case MPU6050_RANGE_1000_DEG:
      Serial.println("+- 1000 deg/s");
      break;
    case MPU6050_RANGE_2000_DEG:
      Serial.println("+- 2000 deg/s");
      break;
  }

  //communication frequency noise filter for I2C
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ); //set frequency range to 21hz
  
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) 
  {
    case MPU6050_BAND_260_HZ:
      Serial.println("260 Hz");
      break;
    case MPU6050_BAND_184_HZ:
      Serial.println("184 Hz");
      break;
    case MPU6050_BAND_94_HZ:
      Serial.println("94 Hz");
      break;
    case MPU6050_BAND_44_HZ:
      Serial.println("44 Hz");
      break;
    case MPU6050_BAND_21_HZ:
      Serial.println("21 Hz");
      break;
    case MPU6050_BAND_10_HZ:
      Serial.println("10 Hz");
      break;
    case MPU6050_BAND_5_HZ:
      Serial.println("5 Hz");
      break;
  }

  Serial.println(""); //idk tbh
  delay(100); //miliseconds
}

//END OF MPU CONFIG

//****************************END OF SENSOR AND SYSTEM CONFIGURATIONS****************************

//-------------------------------------------------------------------------------------------------

void alert()
{
  digitalWrite(red, 1);
  digitalWrite(buz, 1);
  delay(100);
  digitalWrite(buz, 0);
}

void serial_monitor()
{
  ctrl = 1;
  Serial.println("An error occured... ");
  Serial.println("Enter '/help' for commands");
  
  while(ctrl)
  {
    cmd = " "; //empties string
    
    while(Serial.available() == 0); {} //wait for console entry
    cmd = Serial.readString(); //read console input into sting
    cmd.trim(); //trims invisable characters from string
    Serial.println("Processing..."); 
    
    if(cmd == "/help")
    {
      exe = 1; 
    }
    if(cmd == "/exit")
    {
      exe = 2;
    }
    if(cmd == "/restart")
    {
      exe = 3;
    }
    if(cmd == "/skip")
    {
      exe = 4;
    }

    switch(exe)
    {
      case 1: //help
      {
        Serial.println("/help -- displays all available commands");
        Serial.println("/exit -- exits program ");
        Serial.println("/restart -- restarts setup");
        Serial.println("/skip -- ignores error case and proceeds");
        break;
      }
      case 2: //exit
      {
        ctrl = 0;
        digitalWrite(red, 0);
        Serial.println("Exiting systems..");
        exit(0);
        break;
      }
      case 3: //restart
      {
        ctrl = 0;
        digitalWrite(red, 0);
        Serial.println("Reinitializing...");
        setup();
        break;
      }
      case 4: //skip
      {
        ctrl = 0;
        digitalWrite(red, 0);
        break;
      }
      default:
      {   
        break;  
      }
    }
  }
}

void get_SD()
{
    if (!card.init(SPI_HALF_SPEED, cs0)) 
    {
      Serial.println("initialization failed... Is the card inserted properly? ");
      alert();
      serial_monitor();
    } 
    
    else 
    {
      Serial.println("SD card confirmed...");
    }

    // print the type of card
    Serial.print("\nCard type: ");
    switch(card.type()) 
    {
      case SD_CARD_TYPE_SD1:
        Serial.println("SD1");
        break;
      case SD_CARD_TYPE_SD2:
        Serial.println("SD2");
        break;
      case SD_CARD_TYPE_SDHC:
        Serial.println("SDHC");
        break;
      default:
        Serial.println("Unknown");
    }

    //volume of card and partion check (FAT16 or FAT32)
    if (!volume.init(card)) 
    {
      Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card");
      alert();
      return;
    }


    //displays the type and size of the first FAT-type volume
    uint32_t volumesize;
    Serial.print("\nVolume type is FAT");
    Serial.println(volume.fatType(), DEC); //print in decimal form
    Serial.println();
  
    volumesize = volume.blocksPerCluster();    // clusters are collections of blocks
    volumesize *= volume.clusterCount();  
    
    if (volumesize < 8388608ul) 
    {
      Serial.print("Volume size (bytes): ");
      Serial.println(volumesize * 512);        // SD card blocks are always 512 bytes
    }
    Serial.print("Volume size (Kbytes): ");
    volumesize /= 2;
    Serial.println(volumesize);
    Serial.print("Volume size (Mbytes): ");
    volumesize /= 1024;
    Serial.println(volumesize);
}

//****************************BEGIN MAIN PROGRAM LOOP****************************

void loop() 
{ 
  SD.open("dump.txt"); //open text file.
  
  digitalWrite(red, 0);
  
  //error checking for BMP startup
  if (! bmp.performReading()) //if unsuccesful initialization 
  {
    Serial.println("Failed to perform reading :(");
    return;
  }

  /*varaible declarations for MPU data
    a = acceleration
    g= g-force
    temp = temperature
  */
  
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp); // new values for sensors -- variable references memory location not variable name

//****************************MPU AND BMP DATA DISPLAY****************************
  digitalWrite(blue, 1);
  
  data.println("BMP TEMP READOUTS");
  Serial.print("Temperature = ");
  Serial.print(bmp.temperature); //print BMP temperature read
  data.println(bmp.temperature);
  Serial.println(" *C"); //in celcius

  Serial.print("Pressure = ");
  Serial.print(bmp.pressure / 100.0); //raw pressure value divided 100 for readability
  data.println(bmp.pressure);
  Serial.println(" hPa");

  Serial.print("Approx. Altitude = ");
  Serial.print(bmp.readAltitude(SEALEVELPRESSURE_HPA)); //print BMP current altitude
  data.println(bmp.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m"); // in meters

  Serial.println();

  data.println("ACCELERATION READOUT");
  //Print out the values onto the serial monitor 
  Serial.print("Acceleration: ");
  Serial.print(a.acceleration.x); //x postions
  data.println(a.acceleration.x);
  Serial.print(", Y: ");
  Serial.print(a.acceleration.y); //y position
  data.println(a.acceleration.y);
  Serial.print(", Z: ");
  Serial.print(a.acceleration.z); //z position
  data.println(a.acceleration.z);
  Serial.println(" m/s^2");

  data.println("GYRO READOUT");
  //current gyro position
  Serial.print("Rotation: ");
  Serial.print(g.gyro.x);
  data.println(g.gyro.x);
  Serial.print(", Y: ");
  Serial.print(g.gyro.y);
  data.println(g.gyro.y);
  Serial.print(", Z: ");
  Serial.print(g.gyro.z);
  data.println(g.gyro.z);
  Serial.println(" rad/s");
  
  data.println("MPU TEMP READOUTS");
  //current MPU temperature
  Serial.print("Temperature: ");
  Serial.print(temp.temperature); //mpu print temperature 
  data.println(temp.temperature);
  Serial.println(" deg C");

  Serial.println(""); //character space

  digitalWrite(blue, 0);
//END DATA DISPLAY

//****************************HV3 line actuation****************************

  digitalWrite(0,LOW);
  
  //Activate HV 1 whem altitude is above 113.5 meters or flight computer is upside down
  if( bmp.readAltitude(SEALEVELPRESSURE_HPA) > 113.5 ) //when pressure is higher than 113.5 (ground level)
  {
    analogWrite(8, 127); // 50% duty cycle -- half power
  }
  
  if( a.acceleration.z < -10 ) //when stationary and or accel is less than 10
  {
    analogWrite(8, 127); //half duty cycle -- max 255 (0-255)
  }
  
  if( a.acceleration.z >= -10 && bmp.readAltitude(SEALEVELPRESSURE_HPA) <= 113.5 ) //when accel is above - 10 and presure is below 113.5
  {
    analogWrite(8, LOW); //turn off pin 8
  }
  
  delay(200); // delay -- non essential. makes a gap between actuation of pin 8 on met conditions
  digitalWrite(0,LOW); //BUZZER OFF -- safe case
  
//ADD COOL STUFF HERE

//END ADD COOL STUFF  

data.close();
}
//END PROGRAM!
