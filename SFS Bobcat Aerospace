/*
 * FlightComputerBAT.ino
 * Revision date: 14 Dec 2021
 * Edition: 1.00
 * Written by: Texas State Aerospace Team (BAT)
 * This code is written for the flight computer built and designed by the Avionics Club of the Texas State University
 * Aerospace Team. The purpose of this program is to control a flight computer that will sussesfully launch a high 
 * powered rocket 10,000 ft into the air. Once appagee is reached at 10,000 ft, parachutes will be deployed to allow 
 * for a safe landing of the rocket back onto the ground. If any avionics/BAT members make changes to the code, please
 * update the edition and leave a note below explaining changes. 
 * 
 * NOTE: 12/14/21- Started beginning stages for the code. As of now, the computer is set up to interface with the BMP388 and MPU-6050 
 *                 on a small easily testible scale. Acceleration values given by the MPU-6050 appear to be inconsistent when MPU is 
 *                 stationary. Only HV 1 is set up currently for ease of breadboard use. - Connor Martin [1.00] 
 */

//The following definitions and inclusions are required for the BMP388 
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP3XX.h>

#define BMP_SCK 13
#define BMP_MISO 12
#define BMP_MOSI 11
#define BMP_CS 10
#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BMP3XX bmp;



//The following definitions and inclusions are required for the MPU-6050  
#include <Adafruit_MPU6050.h>  
//#include <Adafruit_Sensor.h>   ////////////// No need to define these twice, but nice to ////////////////
//#include <Wire.h>              ////////////// know these are required for the MPU-6050.  ////////////////

Adafruit_MPU6050 mpu;



void setup() 
  {
  Serial.begin(115200);
  
  //The following code attempts to initialize the BMP388
  if (!bmp.begin_I2C()) {   // hardware I2C mode, can pass in address & alt Wire
    Serial.println("Could not find a valid BMP3 sensor, check wiring!");
    while (1);
  }
  
  //The following code attempts to initialize the MPU-6050
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }

  //The following lines of code are for intialzing the pins on the Teesny 4.0 
  pinMode( 2, OUTPUT); //BUZZER
  pinMode( 3, OUTPUT); //REDLED
  pinMode( 4, OUTPUT); //BLUELED    ////////////// IMPORTANT NOTE: No need to define pins used  ////////////////
  pinMode( 7, OUTPUT); //CS 1       ////////////// for SPI or i2C (Exception: CS needs defining) ////////////////
  pinMode( 8, OUTPUT); //HV 1
  pinMode( 9, OUTPUT); //HV 2
  pinMode(10, OUTPUT); //HV 3
  pinMode(11, OUTPUT); //HV 4
  pinMode(12, OUTPUT); //CS 0

  //Set up oversampling and filter initialization for the BMP [ Data Acquisition ]
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
  bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
  bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
  bmp.setOutputDataRate(BMP3_ODR_50_HZ);


  //The rest of this code is data acquisition for the MPU-6050
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);

}

void loop() {
  
  //Get new sensor events with the readings for BMP388 
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  //Print out the values onto the serial monitor 
  Serial.print("Acceleration X: ");
  Serial.print(a.acceleration.x);
  Serial.print(", Y: ");
  Serial.print(a.acceleration.y);
  Serial.print(", Z: ");
  Serial.print(a.acceleration.z);
  Serial.println(" m/s^2");

  Serial.print("Rotation X: ");
  Serial.print(g.gyro.x);
  Serial.print(", Y: ");
  Serial.print(g.gyro.y);
  Serial.print(", Z: ");
  Serial.print(g.gyro.z);
  Serial.println(" rad/s");

  Serial.print("Temperature: ");
  Serial.print(temp.temperature);
  Serial.println(" deg C");

  Serial.println("");

  Serial.print("Temperature = ");
  Serial.print(bmp.temperature);
  Serial.println(" *C");

  Serial.print("Pressure = ");
  Serial.print(bmp.pressure / 100.0);
  Serial.println(" hPa");

  Serial.print("Approx. Altitude = ");
  Serial.print(bmp.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m");

  Serial.println();

  //Activate HV 1 whem altitude is above 113.5 meters or flight computer is upside down
  if( bmp.readAltitude(SEALEVELPRESSURE_HPA) > 113.5 ){
    analogWrite(8, 127);
  }
  if( a.acceleration.z < -10 ){
    analogWrite(8, 127);
  }
  if( a.acceleration.z >= -10 && bmp.readAltitude(SEALEVELPRESSURE_HPA) <= 113.5 ){
    analogWrite(8, LOW);
  }
  
  delay(200);

}
